

1. FLUX 패턴에 대하여 설명해보세요
Flux는 MVC 모델의 단점을 보안하기 위해 만든 페이스북에서 발표한 패턴(pattern)입니다.
React, Redux의 디자인 패턴이기도 합니다.

2. 아래의 hook 함수는 각각 어느 순간에 사용할까요
    (1) useReducer - useReducer 로 구현했을 때의 장점은 useState 의 setState 함수를 여러번 사용하지 않아도 된다는점과, 리듀서로 로직을 분리했으니 다른곳에서도 쉽게 재사용을 할 수 있다는 점
    (2) useContext - 중간에 코드가 바뀌게 된다면 일일히 다 찾아 바꿔야하기도 하고, 해당 데이터가 필요하지 않은 컴포넌트에도 데이터가 전달되어 코드가 지저분해지기도 하는데 이러한 문제를 해결하기 위하여 사용한다.

3. 전역 상태 관리를 해야하는 이유는 무엇일까요
데이터의 이동에서 단지 옮겨주고 싶을 뿐이더라도 그사이 컴포넌트를 거쳐 옮겨야하는 불편함이 있다.
그런 불편함을 겪지 않기위해 redux와 같은 전역상태관리 프로그램을 사용한다.
리덕스를 사용하면 State를 공유하고자할 때 부-자 관계가 아니어도 되고, 중간에 의미없는 이동도 필요없다.

4. 그렇다면 전역 상태 관리는 위 조건에만 부합하면 반드시 수행하는 것이 좋을까요?
   전역 상태 관리를 통해 얻을 수 있는 장단점에 관하여 토의해보세요.

   장점
   1. 상태 예측 가능
   2. 유지 보수가 용이하다
   3. 디버깅이 쉽다
   4. 한 곳에서 관리

   단점 
   1. 코드의 증량
   2. 읽기전용
   3. 컴포넌트와 연결성